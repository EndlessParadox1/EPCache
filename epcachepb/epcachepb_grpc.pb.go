// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: epcachepb.proto

package epcachepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EPCacheClient is the client API for EPCache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EPCacheClient interface {
	Get(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Sync(ctx context.Context, opts ...grpc.CallOption) (EPCache_SyncClient, error)
}

type ePCacheClient struct {
	cc grpc.ClientConnInterface
}

func NewEPCacheClient(cc grpc.ClientConnInterface) EPCacheClient {
	return &ePCacheClient{cc}
}

func (c *ePCacheClient) Get(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/epcachepb.EPCache/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ePCacheClient) Sync(ctx context.Context, opts ...grpc.CallOption) (EPCache_SyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &EPCache_ServiceDesc.Streams[0], "/epcachepb.EPCache/Sync", opts...)
	if err != nil {
		return nil, err
	}
	x := &ePCacheSyncClient{stream}
	return x, nil
}

type EPCache_SyncClient interface {
	Send(*SyncData) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type ePCacheSyncClient struct {
	grpc.ClientStream
}

func (x *ePCacheSyncClient) Send(m *SyncData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ePCacheSyncClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EPCacheServer is the server API for EPCache service.
// All implementations must embed UnimplementedEPCacheServer
// for forward compatibility
type EPCacheServer interface {
	Get(context.Context, *Request) (*Response, error)
	Sync(EPCache_SyncServer) error
	mustEmbedUnimplementedEPCacheServer()
}

// UnimplementedEPCacheServer must be embedded to have forward compatible implementations.
type UnimplementedEPCacheServer struct {
}

func (UnimplementedEPCacheServer) Get(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedEPCacheServer) Sync(EPCache_SyncServer) error {
	return status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedEPCacheServer) mustEmbedUnimplementedEPCacheServer() {}

// UnsafeEPCacheServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EPCacheServer will
// result in compilation errors.
type UnsafeEPCacheServer interface {
	mustEmbedUnimplementedEPCacheServer()
}

func RegisterEPCacheServer(s grpc.ServiceRegistrar, srv EPCacheServer) {
	s.RegisterService(&EPCache_ServiceDesc, srv)
}

func _EPCache_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EPCacheServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epcachepb.EPCache/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EPCacheServer).Get(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _EPCache_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EPCacheServer).Sync(&ePCacheSyncServer{stream})
}

type EPCache_SyncServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*SyncData, error)
	grpc.ServerStream
}

type ePCacheSyncServer struct {
	grpc.ServerStream
}

func (x *ePCacheSyncServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ePCacheSyncServer) Recv() (*SyncData, error) {
	m := new(SyncData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EPCache_ServiceDesc is the grpc.ServiceDesc for EPCache service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EPCache_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "epcachepb.EPCache",
	HandlerType: (*EPCacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _EPCache_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sync",
			Handler:       _EPCache_Sync_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "epcachepb.proto",
}
